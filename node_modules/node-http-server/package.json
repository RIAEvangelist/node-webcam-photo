{
  "name": "node-http-server",
  "version": "1.6.2",
  "description": "A very simple and fast http server for node, bash, and spawnable from C, Python etc. It is lightweight and great for embedded solutions as well as everyday development or public facing apps.",
  "main": "server/http.js",
  "directories": {
    "example": "example"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/RIAEvangelist/node-http-server.git"
  },
  "keywords": [
    "http",
    "server",
    "embedded",
    "fast",
    "light",
    "lightweight",
    "bash",
    "c",
    "python",
    "html",
    "js",
    "img",
    "css"
  ],
  "author": {
    "name": "Brandon Nozaki Miller"
  },
  "license": "DBAD",
  "bugs": {
    "url": "https://github.com/RIAEvangelist/node-http-server/issues"
  },
  "homepage": "https://github.com/RIAEvangelist/node-http-server",
  "readme": "Node http server\n================\n----\n\nSimple to use stand alone node HTTP Server you can spin up from node apps, bash scripts, the commandline, C or python apps etc.\n\n    npm install node-http-server\n\n[![alt node-http-server npm downloads](https://nodei.co/npm-dl/node-http-server.png \"number of times the node-http-server package has been downloaded from npm\")](https://npmjs.org/package/node-http-server)\n\n----\n\n\n## Defaults\n---\n#### currently modifiable via any interface, commandline, bash, node etc.\n\n    port    : 8080\n    root    : Current Working Directory (where you execute the command from)\n    domain  : 0.0.0.0\n    index   : index.html\n    verbose : false\n    noCache : true\n\n`` port `` the port on which the server should run  \n`` root `` the absolute location to the root dir for the public file system  \n`` domain `` the domain which this server applies to. You can add more servers via the node `` domains `` implementation described below than you can via bash or commandline. If you want to accept incoming requests for ***ANY Applicable Domain*** use `` 0.0.0.0 `` this will allow any request that is pointed at this machine on the specified port to use this server config.  \n`` index `` the default file to look for in a dir. if not found a **404** will be displayed   \n`` verbose `` should the server display detailed info about what it is doing\n`` noCache `` should the server prevent caching\n\n---\n#### currently modifiable via node\n\n    domains     :   {}\n    \n    contentType :   {\n                        html    : 'text/html',\n                        css     : 'text/css',\n                        js      : 'text/javascript',\n                        json    : 'application/json',\n                        txt     : 'text/plain',\n                        jpeg    : 'image/jpeg',\n                        jpg     : 'image/jpeg',\n                        png     : 'image/png',\n                        gif     : 'image/gif',\n                        ico     : 'image/x-icon',\n                        appcache: 'text/cache-manifest'\n                    }\n    \n    restrictedType: {}\n    \n    errors  :   {\n                    headers : {\n                        'Content-Type' : 'text/plain'\n                    },\n                    404: '404 MIA',\n                    415: '415 File type not supported',\n                    403: '403 Access Denied',\n                    500: '500 {{err}}'\n                }\n\n`` domains `` this is a mapping of hostname to path. It can be used for multiple different domains, or for subdomains.  \n`` contentType `` mapping of file extension to header content type.  \n`` restrictedType `` extensions to which external access will be denied.  \n`` errors `` error headers and error strings, these can be anything you like from html to text etc. just make sure they all can use the same headers. The **500** error will replace `` {{err}} `` in the specified value with the actual error message from the server.  \n\n---\n\n## Commandline / bash use\n`` launch `` is an argument that specifies to launch the server now with the provided arguments and defaults\n\n    node ~/git/node-http-server/server/http.js root=~/myApp/ port=9999 launch=now\n\nyou can specify any of the variables frpom the ***currently modifiable via any interface, commandline, bash, node etc.*** section above. The order does not matter.\n\n    node ~/git/node-http-server/server/http.js root=~/myApp/ port=8888 verbose=true launch=now\n\n---\n\n## node app use\n\n    var server=require('node-http-server');\n\n`` server `` has 2 methods, `` deploy `` and `` configTemplate ``\n\n`` server.configTemplate `` will generate a complete config file based off of the default values and arguments passed in when launching the app. **DO NOT USE launch=now** as an argument for a node app. This will result in launching 2 servers, the one you specify with the arguments passed and then the one the node app launches too.\n\n`` server.deploy `` will accept any config params and merge them with a fresh configTemplate, so passing a modified config based off of `` server.configTemplate() `` will result in using only the values from the modified config passed when deploying as it will override all of the defaults. ***The passed config object only merges to one level deep*** so if you pass a multi level object like `` contentTypes `` it will overwrite the default config with what you sent for that object rather than merging your object with the default.\n\n---\n\n#### node examples\ncan be found in the examples folder\n\n#### basic\nthis app could be launched as  \n`` node basicApp.js verbose=true  ``  \nto force verbose logging. This can be helpful if you have many servers in a single app and want them all to be verbose right now for debugging or testing purposes.\n    \n    var server=require('node-http-server');\n\n    console.log(server);\n    \n    server.deploy(\n        {\n            port:8000,\n            root:'~/myApp/'\n        }\n    ); \n    \n---\n#### verbose\n\n    var server=require('node-http-server');\n\n    console.log(server);\n    \n    server.deploy(\n        {\n            verbose:true,\n            port:8001,\n            root:'~/myApp/'\n        }\n    );\n    \n---\n#### advanced\n    \n    var server=require('node-http-server');\n\n    console.log(server);\n    \n    var config=server.configTemplate();\n    config.errors['404']    = 'These are not the files you are looking for...';\n    config.contentType.mp4  = 'video/mp4';\n    config.port             = 8005;\n    config.verbose          = true;\n    config.root             = '~/myApp/'\n    \n    server.deploy(config);\n\n---\n#### multiple domains or subdomains\n\n    var server=require('node-http-server');\n\n    console.log(server);\n    \n    server.deploy(\n        {\n            verbose:true,\n            port:8010,\n            root:process.env.HOME+'/myApp/',\n            domain:'myapp',\n            domains:{\n                'a.myapp':process.env.HOME+'/myApp/mySubdomain/',\n                'yourapp.com':process.env.HOME+'/www/yourApp/'\n            }\n        }\n    );    \n\n---\n\n## Starting with forever\n*It is helpful especially when running multiple servers to label them*  with `` --uid `` for easy to remember process names\n\n*when starting the same server many times, **like every time the system boots** you will want to append to the same log file* so use `` -a ``. Without `` -a `` forever will throw an error stating that the log file for the `` --uid `` already exists.\n\n    forever --uid nodeServer -a start ~/git/node-http-server/server/http.js root=~/myApp/ port=9999 launch=now\n    \nThis can be set as a ``.profile`` command or a ``.bash_rc`` command as well if you want to launch the server every time the computer boots up.\n",
  "readmeFilename": "README.md",
  "_id": "node-http-server@1.6.2",
  "dist": {
    "shasum": "cec037c28c8a392d3b03ac76bcf213826a755b4b"
  },
  "_from": "node-http-server@",
  "_resolved": "https://registry.npmjs.org/node-http-server/-/node-http-server-1.6.2.tgz"
}
